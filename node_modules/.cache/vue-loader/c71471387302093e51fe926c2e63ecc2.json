{"remainingRequest":"/home/dinesh/bookmarks-vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/dinesh/bookmarks-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dinesh/bookmarks-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dinesh/bookmarks-vue/src/components/bookmarks.vue?vue&type=template&id=8894f8c6&","dependencies":[{"path":"/home/dinesh/bookmarks-vue/src/components/bookmarks.vue","mtime":1606558877295},{"path":"/home/dinesh/bookmarks-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dinesh/bookmarks-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/dinesh/bookmarks-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dinesh/bookmarks-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}